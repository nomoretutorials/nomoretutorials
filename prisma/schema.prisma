// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid())
  name            String?
  email           String
  emailVerified   Boolean         @default(false)
  image           String?
  experienceLevel ExperienceLevel @default(BEGINNER)
  techStacks      String[]        @default([])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  lastLoginAt     DateTime?
  sessions        Session[]
  accounts        Account[]
  Project         Project[]

  @@unique([email])
  @@index([email])
  @@index([name])
  @@map("user")
}

model Project {
  id            String        @id @default(uuid())
  title         String
  description   String
  status        ProjectStatus @default(DRAFT)
  techStacks    String[]      @default([])
  repositoryUrl String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([userId, status])
  @@map("projects")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

enum ProjectStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ON_HOLD
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
}
